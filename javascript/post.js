// Import c√°c h√†m c·∫ßn thi·∫øt t·ª´ Firebase SDK
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.5.2/firebase-app.js";
import { getAuth } from "https://www.gstatic.com/firebasejs/10.5.2/firebase-auth.js";
import { 
    getDatabase, 
    ref, 
    push, 
    set, 
    get,
    update 
} from "https://www.gstatic.com/firebasejs/10.5.2/firebase-database.js";

const firebaseConfig = {
    apiKey: "AIzaSyBSnLwOyJjhQw2f89ZNaceZ1Mr-s3XqhHU",
    authDomain: "nhatkythoidai-565cb.firebaseapp.com",
    databaseURL: "https://nhatkythoidai-565cb-default-rtdb.asia-southeast1.firebasedatabase.app",
    projectId: "nhatkythoidai-565cb",
    storageBucket: "nhatkythoidai-565cb.firebasestorage.app",
    messagingSenderId: "561165880612",
    appId: "1:561165880612:web:d970e8c833e61d45e877b1",
    measurementId: "G-113LLR2L5J"
};

// Kh·ªüi t·∫°o Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth();
const database = getDatabase(app);

// Bi·∫øn to√†n c·ª•c
let startTime = Date.now();
let wordCount = 0;
let quill;
let postId = null;
let selectedCategory = 'daily';
let selectedEmotion = null;
let customCategories = [];
let customEmotions = [];

// Ki·ªÉm tra x√°c th·ª±c
auth.onAuthStateChanged((user) => {
    if (!user) {
        window.location.href = '/static/login.html';
        return;
    }

    // Kh·ªüi t·∫°o Quill editor
    initQuillEditor();
    
    // Ki·ªÉm tra xem c√≥ ƒëang ch·ªânh s·ª≠a b√†i vi·∫øt c≈© kh√¥ng
    const urlParams = new URLSearchParams(window.location.search);
    postId = urlParams.get('id');
    
    if (postId) {
        loadPost(postId, user.uid);
    }
    
    // T·∫£i danh m·ª•c v√† c·∫£m x√∫c t√πy ch·ªânh
    loadCustomCategories(user.uid);
    loadCustomEmotions(user.uid);
});

// X·ª≠ l√Ω s·ª± ki·ªán cho c√°c danh m·ª•c
document.querySelectorAll('.category-item').forEach(item => {
    item.addEventListener('click', () => {
        document.querySelectorAll('.category-item').forEach(i => i.classList.remove('selected'));
        item.classList.add('selected');
        selectedCategory = item.dataset.category;
    });
});

// X·ª≠ l√Ω s·ª± ki·ªán cho c√°c c·∫£m x√∫c
document.querySelectorAll('.emotion-item').forEach(item => {
    item.addEventListener('click', () => {
        document.querySelectorAll('.emotion-item').forEach(i => i.classList.remove('selected'));
        item.classList.add('selected');
        selectedEmotion = item.dataset.emotion;
    });
});

// Th√™m danh m·ª•c m·ªõi
document.getElementById('addCategoryBtn').addEventListener('click', async () => {
    const categoryName = prompt('Nh·∫≠p t√™n danh m·ª•c m·ªõi:');
    if (!categoryName) return;

    const user = auth.currentUser;
    if (!user) return;

    const categoryId = 'custom_' + Date.now();
    const newCategory = {
        id: categoryId,
        name: categoryName,
        icon: 'fa-folder' // Icon m·∫∑c ƒë·ªãnh
    };

    try {
        await set(ref(database, `users/${user.uid}/categories/${categoryId}`), newCategory);
        addCategoryToUI(newCategory);
        customCategories.push(newCategory);
    } catch (error) {
        console.error('L·ªói khi th√™m danh m·ª•c:', error);
        alert('Kh√¥ng th·ªÉ th√™m danh m·ª•c m·ªõi');
    }
});

// Th√™m c·∫£m x√∫c m·ªõi
document.getElementById('addEmotionBtn').addEventListener('click', async () => {
    const emotionName = prompt('Nh·∫≠p t√™n c·∫£m x√∫c m·ªõi:');
    if (!emotionName) return;

    const emotionEmoji = prompt('Nh·∫≠p emoji cho c·∫£m x√∫c (v√≠ d·ª•: üòä):');
    if (!emotionEmoji) return;

    const user = auth.currentUser;
    if (!user) return;

    const emotionId = 'custom_' + Date.now();
    const newEmotion = {
        id: emotionId,
        name: emotionName,
        emoji: emotionEmoji
    };

    try {
        await set(ref(database, `users/${user.uid}/emotions/${emotionId}`), newEmotion);
        addEmotionToUI(newEmotion);
        customEmotions.push(newEmotion);
    } catch (error) {
        console.error('L·ªói khi th√™m c·∫£m x√∫c:', error);
        alert('Kh√¥ng th·ªÉ th√™m c·∫£m x√∫c m·ªõi');
    }
});

// T·∫£i danh m·ª•c t√πy ch·ªânh
async function loadCustomCategories(userId) {
    try {
        const snapshot = await get(ref(database, `users/${userId}/categories`));
        if (snapshot.exists()) {
            const categories = snapshot.val();
            customCategories = Object.values(categories);
            customCategories.forEach(addCategoryToUI);
        }
    } catch (error) {
        console.error('L·ªói khi t·∫£i danh m·ª•c:', error);
    }
}

// T·∫£i c·∫£m x√∫c t√πy ch·ªânh
async function loadCustomEmotions(userId) {
    try {
        const snapshot = await get(ref(database, `users/${userId}/emotions`));
        if (snapshot.exists()) {
            const emotions = snapshot.val();
            customEmotions = Object.values(emotions);
            customEmotions.forEach(addEmotionToUI);
        }
    } catch (error) {
        console.error('L·ªói khi t·∫£i c·∫£m x√∫c:', error);
    }
}

// Th√™m danh m·ª•c v√†o giao di·ªán
function addCategoryToUI(category) {
    const categoriesList = document.getElementById('categoriesList');
    const categoryElement = document.createElement('div');
    categoryElement.className = 'category-item';
    categoryElement.dataset.category = category.id;
    categoryElement.innerHTML = `<i class="fas ${category.icon}"></i> ${category.name}`;
    
    categoryElement.addEventListener('click', () => {
        document.querySelectorAll('.category-item').forEach(i => i.classList.remove('selected'));
        categoryElement.classList.add('selected');
        selectedCategory = category.id;
    });

    categoriesList.appendChild(categoryElement);
}

// Th√™m c·∫£m x√∫c v√†o giao di·ªán
function addEmotionToUI(emotion) {
    const emotionsList = document.getElementById('emotionsList');
    const emotionElement = document.createElement('div');
    emotionElement.className = 'emotion-item';
    emotionElement.dataset.emotion = emotion.id;
    emotionElement.innerHTML = `${emotion.emoji} ${emotion.name}`;
    
    emotionElement.addEventListener('click', () => {
        document.querySelectorAll('.emotion-item').forEach(i => i.classList.remove('selected'));
        emotionElement.classList.add('selected');
        selectedEmotion = emotion.id;
    });

    emotionsList.appendChild(emotionElement);
}

// X·ª≠ l√Ω n√∫t tho√°t
document.getElementById('exitBtn').addEventListener('click', () => {
    if (quill.getText().trim() !== '') {
        if (confirm('B·∫°n c√≥ mu·ªën l∆∞u b√†i vi·∫øt tr∆∞·ªõc khi tho√°t kh√¥ng?')) {
            document.getElementById('savePost').click();
        }
    }
    window.location.href = '/static/index.html';
});

// Kh·ªüi t·∫°o Quill Editor
function initQuillEditor() {
    quill = new Quill('#editor', {
        theme: 'snow',
        modules: {
            toolbar: [
                ['bold', 'italic', 'underline', 'strike'],
                ['blockquote', 'code-block'],
                [{ 'header': 1 }, { 'header': 2 }],
                [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                [{ 'script': 'sub'}, { 'script': 'super' }],
                [{ 'indent': '-1'}, { 'indent': '+1' }],
                [{ 'direction': 'rtl' }],
                [{ 'size': ['small', false, 'large', 'huge'] }],
                [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                [{ 'color': [] }, { 'background': [] }],
                [{ 'font': [] }],
                [{ 'align': [] }],
                ['clean']
            ]
        },
        placeholder: 'H√¥m nay c·ªßa b·∫°n th·∫ø n√†o?'
    });

    // Theo d√µi thay ƒë·ªïi ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë t·ª´
    quill.on('text-change', updateWordCount);
}

// C·∫≠p nh·∫≠t s·ªë t·ª´
function updateWordCount() {
    const text = quill.getText();
    wordCount = text.trim().split(/\s+/).length;
    if (text.trim() === '') wordCount = 0;
    
    document.getElementById('wordCount').textContent = `S·ªë t·ª´: ${wordCount}`;
    updateTimeSpent();
}

// C·∫≠p nh·∫≠t th·ªùi gian vi·∫øt
function updateTimeSpent() {
    const timeSpent = Math.floor((Date.now() - startTime) / 60000); // Chuy·ªÉn ƒë·ªïi th√†nh ph√∫t
    document.getElementById('timeSpent').textContent = `Th·ªùi gian: ${timeSpent} ph√∫t`;
}

// T·∫£i b√†i vi·∫øt c≈© ƒë·ªÉ ch·ªânh s·ª≠a
async function loadPost(postId, userId) {
    try {
        const postRef = ref(database, `posts/${userId}/${postId}`);
        const snapshot = await get(postRef);
        
        if (snapshot.exists()) {
            const post = snapshot.val();
            
            // ƒêi·ªÅn th√¥ng tin b√†i vi·∫øt
            document.getElementById('postTitle').value = post.title || '';
            quill.setContents(JSON.parse(post.content));
            document.getElementById('postCategory').value = post.category || 'daily';
            document.getElementById('isFavorite').checked = post.isFavor || false;
            
            // C·∫≠p nh·∫≠t th·ªùi gian ch·ªânh s·ª≠a
            document.getElementById('lastEdit').textContent = 
                `Ch·ªânh s·ª≠a l·∫ßn cu·ªëi: ${new Date(post.createdTime).toLocaleString('vi-VN')}`;
        }
    } catch (error) {
        console.error('L·ªói khi t·∫£i b√†i vi·∫øt:', error);
        alert('Kh√¥ng th·ªÉ t·∫£i b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
}

// L∆∞u b√†i vi·∫øt
document.getElementById('savePost').addEventListener('click', async () => {
    const user = auth.currentUser;
    if (!user) return;

    const title = document.getElementById('postTitle').value.trim();
    const content = JSON.stringify(quill.getContents());
    const category = document.getElementById('postCategory').value;
    const isFavor = document.getElementById('isFavorite').checked;

    if (!title) {
        alert('Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ cho b√†i vi·∫øt');
        return;
    }

    if (quill.getText().trim().length < 10) {
        alert('N·ªôi dung b√†i vi·∫øt qu√° ng·∫Øn');
        return;
    }

    const postData = {
        title,
        content,
        category: selectedCategory,
        emotion: selectedEmotion,
        isFavor,
        createdTime: Date.now(),
        authorId: user.uid
    };

    try {
        if (postId) {
            // C·∫≠p nh·∫≠t b√†i vi·∫øt c≈©
            const postRef = ref(database, `posts/${user.uid}/${postId}`);
            await update(postRef, postData);
        } else {
            // T·∫°o b√†i vi·∫øt m·ªõi
            const postsRef = ref(database, `posts/${user.uid}`);
            const newPostRef = push(postsRef);
            await set(newPostRef, postData);
        }

        alert('ƒê√£ l∆∞u b√†i vi·∫øt th√†nh c√¥ng!');
        window.location.href = '/static/index.html';
    } catch (error) {
        console.error('L·ªói khi l∆∞u b√†i vi·∫øt:', error);
        alert('ƒê√£ c√≥ l·ªói x·∫£y ra khi l∆∞u b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i.');
    }
});

// C·∫≠p nh·∫≠t th·ªùi gian ƒë·ªãnh k·ª≥
setInterval(updateTimeSpent, 60000); // C·∫≠p nh·∫≠t m·ªói ph√∫t