// Import c√°c h√†m c·∫ßn thi·∫øt t·ª´ Firebase SDK
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.5.2/firebase-app.js";
import { getAuth, signOut } from "https://www.gstatic.com/firebasejs/10.5.2/firebase-auth.js";
import { 
    getDatabase, 
    ref, 
    onValue, 
    query, 
    orderByChild, 
    get,
    remove 
} from "https://www.gstatic.com/firebasejs/10.5.2/firebase-database.js";

const firebaseConfig = {
    apiKey: "AIzaSyBSnLwOyJjhQw2f89ZNaceZ1Mr-s3XqhHU",
    authDomain: "nhatkythoidai-565cb.firebaseapp.com",
    databaseURL: "https://nhatkythoidai-565cb-default-rtdb.asia-southeast1.firebasedatabase.app",
    projectId: "nhatkythoidai-565cb",
    storageBucket: "nhatkythoidai-565cb.firebasestorage.app",
    messagingSenderId: "561165880612",
    appId: "1:561165880612:web:d970e8c833e61d45e877b1",
    measurementId: "G-113LLR2L5J"
};

// Kh·ªüi t·∫°o Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth();
const database = getDatabase(app);

// Ki·ªÉm tra tr·∫°ng th√°i x√°c th·ª±c
auth.onAuthStateChanged((user) => {
    if (!user) {
        // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p n·∫øu ch∆∞a x√°c th·ª±c
        window.location.href = '/static/login.html';
        return;
    }

    // L·∫•y v√† hi·ªÉn th·ªã t√™n ng∆∞·ªùi d√πng t·ª´ database
    const userRef = ref(database, `users/${user.uid}`);
    get(userRef).then((snapshot) => {
        if (snapshot.exists()) {
            const userData = snapshot.val();
            document.getElementById('username').textContent = userData.fullName;
            // C·∫≠p nh·∫≠t l·∫°i localStorage
            localStorage.setItem('userName', userData.fullName);
        }
    }).catch((error) => {
        console.error("L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
    });

    // T·∫£i danh s√°ch b√†i vi·∫øt
    loadPosts(user.uid);
});

// X·ª≠ l√Ω ƒëƒÉng xu·∫•t
document.getElementById('logoutBtn').addEventListener('click', async () => {
    try {
        await signOut(auth);
        // X√≥a th√¥ng tin trong localStorage
        localStorage.removeItem('userId');
        localStorage.removeItem('userName');
        // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
        window.location.href = '/static/login.html';
    } catch (error) {
        console.error('L·ªói ƒëƒÉng xu·∫•t:', error);
        alert('ƒê√£ c√≥ l·ªói x·∫£y ra khi ƒëƒÉng xu·∫•t');
    }
});

// X·ª≠ l√Ω n√∫t t·∫°o b√†i vi·∫øt m·ªõi
document.getElementById('newPostBtn').addEventListener('click', () => {
    window.location.href = '/static/post.html';
});

// X·ª≠ l√Ω t√¨m ki·∫øm v√† l·ªçc
document.getElementById('searchInput').addEventListener('input', filterPosts);
document.getElementById('categoryFilter').addEventListener('change', filterPosts);
document.getElementById('sortFilter').addEventListener('change', filterPosts);

let allPosts = []; // L∆∞u tr·ªØ t·∫•t c·∫£ b√†i vi·∫øt ƒë·ªÉ t√¨m ki·∫øm v√† l·ªçc

// H√†m t·∫£i danh s√°ch b√†i vi·∫øt
function loadPosts(userId) {
    const postsRef = ref(database, `posts/${userId}`);
    onValue(postsRef, (snapshot) => {
        const postsData = snapshot.val();
        allPosts = [];
        
        if (postsData) {
            // Chuy·ªÉn ƒë·ªïi object th√†nh array v√† th√™m id
            Object.keys(postsData).forEach(key => {
                allPosts.push({
                    id: key,
                    ...postsData[key]
                });
            });
        }
        
        filterPosts(); // √Åp d·ª•ng b·ªô l·ªçc hi·ªán t·∫°i
    });
}

// H√†m l·ªçc v√† hi·ªÉn th·ªã b√†i vi·∫øt
function filterPosts() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const category = document.getElementById('categoryFilter').value;
    const sortOrder = document.getElementById('sortFilter').value;
    
    let filteredPosts = [...allPosts];
    
    // L·ªçc theo t·ª´ kh√≥a t√¨m ki·∫øm
    if (searchTerm) {
        filteredPosts = filteredPosts.filter(post => 
            post.title.toLowerCase().includes(searchTerm) ||
            post.content.toLowerCase().includes(searchTerm)
        );
    }
    
    // L·ªçc theo danh m·ª•c
    if (category !== 'all') {
        filteredPosts = filteredPosts.filter(post => post.category === category);
    }
    
    // S·∫Øp x·∫øp
    filteredPosts.sort((a, b) => {
        if (sortOrder === 'newest') {
            return new Date(b.createdAt) - new Date(a.createdAt);
        } else {
            return new Date(a.createdAt) - new Date(b.createdAt);
        }
    });
    
    displayPosts(filteredPosts);
}

// H√†m hi·ªÉn th·ªã b√†i vi·∫øt
function displayPosts(posts) {
    const postsContainer = document.getElementById('postsList');
    
    if (posts.length === 0) {
        postsContainer.innerHTML = `
            <div class="no-posts">
                <i class="fas fa-book-open" style="font-size: 3em; margin-bottom: 15px;"></i>
                <h3>Ch∆∞a c√≥ b√†i vi·∫øt n√†o</h3>
                <p>H√£y t·∫°o b√†i vi·∫øt ƒë·∫ßu ti√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu h√†nh tr√¨nh nh·∫≠t k√Ω c·ªßa b·∫°n</p>
            </div>`;
        return;
    }
    
    postsContainer.innerHTML = posts.map(post => `
        <div class="post-card ${post.isFavor ? 'favorite' : ''}">
            <div class="post-content">
                <div class="post-header">
                    <h3 class="post-title">${post.title || 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ'}</h3>
                    ${post.isFavor ? '<i class="fas fa-star favorite-icon"></i>' : ''}
                </div>
                <p class="post-excerpt">${JSON.parse(post.content).ops[0].insert.substring(0, 150)}${post.content.length > 150 ? '...' : ''}</p>
                <div class="post-meta">
                    <span><i class="fas fa-calendar"></i> ${new Date(post.createdTime).toLocaleString('vi-VN')}</span>
                    <span><i class="fas fa-folder"></i> ${getCategoryName(post.category)}</span>
                    ${post.emotion ? `<span class="post-emotion">${getEmotionEmoji(post.emotion)}</span>` : ''}
                </div>
                <div class="post-actions">
                    <button class="action-button edit-button" onclick="editPost('${post.id}')">
                        <i class="fas fa-edit"></i> S·ª≠a
                    </button>
                    <button class="action-button delete-button" onclick="deletePost('${post.id}')">
                        <i class="fas fa-trash"></i> X√≥a
                    </button>
                </div>
            </div>
        </div>
    `).join('');
}

// H√†m l·∫•y t√™n danh m·ª•c
function getCategoryName(category) {
    const categories = {
        'daily': 'Nh·∫≠t k√Ω h√†ng ng√†y',
        'memory': 'K·ª∑ ni·ªám ƒë√°ng nh·ªõ',
        'love': 'T√¨nh y√™u'
    };
    
    if (category.startsWith('custom_')) {
        const customCategory = customCategories.find(c => c.id === category);
        return customCategory ? customCategory.name : category;
    }
    
    return categories[category] || category;
}

// H√†m l·∫•y emoji c·∫£m x√∫c
function getEmotionEmoji(emotionId) {
    const emotions = {
        'happy': 'üòä',
        'sad': 'üò¢',
        'angry': 'üò°',
        'peaceful': 'üòå'
    };
    
    if (emotionId.startsWith('custom_')) {
        const customEmotion = customEmotions.find(e => e.id === emotionId);
        return customEmotion ? customEmotion.emoji : 'üòê';
    }
    
    return emotions[emotionId] || 'üòê';
}

// H√†m ch·ªânh s·ª≠a b√†i vi·∫øt
function editPost(postId) {
    window.location.href = `/static/post.html?id=${postId}`;
}

// H√†m x√≥a b√†i vi·∫øt
function deletePost(postId) {
    if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√†i vi·∫øt n√†y kh√¥ng?')) {
        const userId = localStorage.getItem('userId');
        const postRef = ref(database, `posts/${userId}/${postId}`);
        remove(postRef)
            .then(() => {
                alert('ƒê√£ x√≥a b√†i vi·∫øt th√†nh c√¥ng');
            })
            .catch(error => {
                console.error('L·ªói khi x√≥a b√†i vi·∫øt:', error);
                alert('ƒê√£ c√≥ l·ªói x·∫£y ra khi x√≥a b√†i vi·∫øt');
            });
    }
}

// Th√™m c√°c h√†m v√†o window object ƒë·ªÉ c√≥ th·ªÉ g·ªçi t·ª´ onclick
window.editPost = editPost;
window.deletePost = deletePost;